@page "/{SelectedFolderId:int?}"
@inject DapperCX<int> Data
@inject Readable Readable

<div class="row">
    <div class="col-3" style="overflow:auto;max-height: 95vh">
        <RadzenTree Data="@RootFolders" Expand="OnExpand" Change="OnChange" @ref="treeView">
            <RadzenTreeLevel TextProperty="Name" HasChildren="(e) => (e as Folder).HasChildren" @ref="treeLevel" Selected="@(item => ((Folder)item).Id == SelectedFolderId)"/>
        </RadzenTree>
    </div>

    <div class="col-9" style="overflow:auto;max-height:95vh">
        <div class="d-flex justify-content-between">            
            @if (CurrentFolder != null)
            {
                <ul class="breadcrumb">
                    @foreach (var path in CurrentFolder.Paths)
                    {
                        <li class="breadcrumb-item">
                            <a href="?SelectedFolderId=@path.Id" class="btn btn-sm btn-outline-info">@path.Name</a>
                        </li>
                    }
                    <li>
                        <span class="small text-muted ml-3">folder Id @SelectedFolderId</span>
                    </li>
                </ul>                
            }
            else
            {
                <span class="small text-muted">no folder selected</span>
            }

            @if ((CurrentFolder?.ParentId ?? 0) != 0)
            {
                <button class="btn btn-primary" @onclick="NavUp">
                    <span class="oi oi-chevron-top"></span>
                </button>
            }
        </div>
        
        @foreach (var dir in FolderData)
        {
            <div class="my-3">
                <div class="d-flex justify-content-between">
                    <div class="mb-3">
                        <button class="btn btn-secondary" data-toggle="collapse" data-target="#files-@dir.Key" type="button">@dir.Value.Name</button>                    
                        @if (dir.Key != SelectedFolderId)
                        {
                            <a class="btn btn-secondary ml-2" href="?SelectedFolderId=@dir.Key">
                                <span class="oi oi-chevron-left"></span>
                            </a>
                        }
                    </div>                                        
                    <div>
                        <span>@dir.Value.FileCount file(s)</span>
                        <span> | </span>
                        <span>@dir.Value.PercentOfTotal.ToString("p1")</span>
                        <span> | </span>
                        <span>@Readable.FileSize(dir.Value.FolderSize)</span>
                    </div>                    
                </div>

                @{ 
                    var show = (dir.Key == SelectedFolderId) ? "show" : string.Empty;
                }
                @if (Files != null)
                {
                    <div id="files-@dir.Key" class="collapse-in collapse @show mb-3">
                        <table class="table">
                            <tr>
                                <th>Name</th>
                                <th>Length</th>
                                <th>Created</th>
                                <th>Modified</th>
                            </tr>
                            @foreach (var file in Files[dir.Key])
                            {
                                <tr>
                                    <td>@file.Name</td>
                                    <td>@Readable.FileSize(file.Length)</td>
                                    <td>@file.DateCreated</td>
                                    <td>@file.DateModified</td>
                                </tr>
                            }
                        </table>

                        @if (SubFolders[dir.Key].Any())
                        {
                            <ul class="nav">
                                <li><span class="mr-3">Subfolders:</span></li>
                                @foreach (var subdir in SubFolders[dir.Key])
                                {
                                    <li>
                                        <button class="btn btn-sm btn-secondary mr-3" @onclick="@((args) => SelectedFolderId = subdir.Id)">@subdir.FolderName</button>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    RadzenTree treeView;
    RadzenTreeLevel treeLevel;
    IEnumerable<Folder> RootFolders;

    Folder CurrentFolder;
    ILookup<int, FilesInAndBelowFolderResult> Files;
    ILookup<int, FolderTreeResult> SubFolders;
    Dictionary<int, FolderRollupResult> FolderData = new Dictionary<int, FolderRollupResult>();

    [Parameter]
    public int? SelectedFolderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        RootFolders = await Data.QueryAsync(new ChildFolders() { ParentId = 0 });
    }

    async Task OnExpand(TreeExpandEventArgs args)
    {
        var folderId = (args.Value as Folder).Id;
        var folders = await Data.QueryAsync(new ChildFolders() { ParentId = folderId });

        args.Children.Data = folders;
        args.Children.HasChildren = (row) => (row as Folder).HasChildren;
        args.Children.TextProperty = "Name";
    }

    async Task OnChange(TreeEventArgs args)
    {
        SelectedFolderId = (args.Value as Folder).Id;
        CurrentFolder = await Data.GetAsync<Folder>(SelectedFolderId ?? 0);
        FolderData = (await Data.QueryAsync(new FolderRollup() { ParentId = SelectedFolderId ?? 0 })).ToDictionary(row => row.FolderId);
        SubFolders = (await Data.QueryAsync(new FolderTree() { FolderId = SelectedFolderId ?? 0, Depth = 2 })).ToLookup(row => row.ParentId);
        Files = (await Data.QueryAsync(new FilesInAndBelowFolder() { FolderId = SelectedFolderId ?? 0, Depth = 1 })).ToLookup(row => row.FolderId);
    }

    async Task NavUp(MouseEventArgs args)
    {
        SelectedFolderId = CurrentFolder.ParentId;
    }
}